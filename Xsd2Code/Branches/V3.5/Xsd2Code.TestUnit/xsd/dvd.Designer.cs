// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.5.0.18323
//    <NameSpace>Xsd2Code.TestUnit</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><BaseClassName>EntityBase</BaseClassName><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>True</UseBaseClass><GenBaseClass>True</GenBaseClass><GenerateCloneMethod>True</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net35</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>True</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><InitializeFields>Collections</InitializeFields><GenerateAllTypes>True</GenerateAllTypes>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace Xsd2Code.TestUnit {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;
    
    
    #region Base entity class
    public partial class EntityBase<T> : System.ComponentModel.INotifyPropertyChanged
     {
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(T));
                }
                return serializer;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public virtual void OnPropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler handler = this.PropertyChanged;
            if ((handler != null)) {
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EntityBase object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an EntityBase object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output EntityBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out T obj, out System.Exception exception) {
            exception = null;
            obj = default(T);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out T obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public new static T Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((T)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        public static T Deserialize(System.IO.Stream s) {
            return ((T)(Serializer.Deserialize(s)));
        }
        
        /// <summary>
        /// Serializes current EntityBase object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an EntityBase object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EntityBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out T obj, out System.Exception exception) {
            exception = null;
            obj = default(T);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out T obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out T obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static T LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public new static T LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
        
        #region Clone method
        /// <summary>
        /// Create a clone of this T object
        /// </summary>
        public virtual T Clone() {
            return ((T)(this.MemberwiseClone()));
        }
        #endregion
    }
    #endregion
    
    /// <summary>
    /// Actor pépé class include firstname and lastname (ûàéçè).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class Actor : EntityBase<Actor> {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string firstnameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string lastnameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private byte[] pictureField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.Nullable<bool> principalActorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nationalityField;
        
        /// <summary>
        /// Actor class constructor
        /// </summary>
        public Actor() {
            this.nationalityField = "US";
        }
        
        /// <summary>
        /// Gets or sets the firstname of the actor
        /// </summary>
        public string firstname {
            get {
                return this.firstnameField;
            }
            set {
                if (((this.firstnameField == null) 
                            || (firstnameField.Equals(value) != true))) {
                    this.firstnameField = value;
                    this.OnPropertyChanged("firstname");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the lastname of the actor
        /// </summary>
        public string lastname {
            get {
                return this.lastnameField;
            }
            set {
                if (((this.lastnameField == null) 
                            || (lastnameField.Equals(value) != true))) {
                    this.lastnameField = value;
                    this.OnPropertyChanged("lastname");
                }
            }
        }
        
        /// <summary>
        /// Picture of actor
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="hexBinary")]
        public byte[] picture {
            get {
                return this.pictureField;
            }
            set {
                if (((this.pictureField == null) 
                            || (pictureField.Equals(value) != true))) {
                    this.pictureField = value;
                    this.OnPropertyChanged("picture");
                }
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool PrincipalActor {
            get {
                if (this.principalActorField.HasValue) {
                    return this.principalActorField.Value;
                }
                else {
                    return default(bool);
                }
            }
            set {
                if ((principalActorField.Equals(value) != true)) {
                    this.principalActorField = value;
                    this.OnPropertyChanged("PrincipalActor");
                }
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrincipalActorSpecified {
            get {
                return this.principalActorField.HasValue;
            }
            set {
                if (value==false) {
                    this.principalActorField = null;
                }
            }
        }
        
        /// <summary>
        /// nationality of actor
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("US")]
        public string nationality {
            get {
                return this.nationalityField;
            }
            set {
                if (((this.nationalityField == null) 
                            || (nationalityField.Equals(value) != true))) {
                    this.nationalityField = value;
                    this.OnPropertyChanged("nationality");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class DvdCollection : EntityBase<DvdCollection> {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<dvd> dvdsField;
        
        /// <summary>
        /// DvdCollection class constructor
        /// </summary>
        public DvdCollection() {
            this.dvdsField = new List<dvd>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Dvds")]
        public List<dvd> Dvds {
            get {
                return this.dvdsField;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class dvd : EntityBase<dvd> {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string yearField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.Nullable<System.DateTime> publishField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string titleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private Styles styleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Actor> actorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private int publishYearField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private dvdCover coverField;
        
        /// <summary>
        /// dvd class constructor
        /// </summary>
        public dvd() {
            this.actorField = new List<Actor>();
            this.titleField = "DefaultTitle";
            this.styleField = Styles.Action;
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Year {
            get {
                return this.yearField;
            }
            set {
                if (((this.yearField == null) 
                            || (yearField.Equals(value) != true))) {
                    this.yearField = value;
                    this.OnPropertyChanged("Year");
                }
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="date", IsNullable=true)]
        public System.Nullable<System.DateTime> Publish {
            get {
                return this.publishField;
            }
            set {
                if (((this.publishField == null) 
                            || (publishField.Equals(value) != true))) {
                    this.publishField = value;
                    this.OnPropertyChanged("Publish");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the title of dvd.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                if (((this.titleField == null) 
                            || (titleField.Equals(value) != true))) {
                    this.titleField = value;
                    this.OnPropertyChanged("Title");
                }
            }
        }
        
        public Styles Style {
            get {
                return this.styleField;
            }
            set {
                if ((styleField.Equals(value) != true)) {
                    this.styleField = value;
                    this.OnPropertyChanged("Style");
                }
            }
        }
        
        /// <summary>
        /// Represent the actor list
        /// The list include Firstname and last name of the actor.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Actor")]
        public List<Actor> Actor {
            get {
                return this.actorField;
            }
        }
        
        public int PublishYear {
            get {
                return this.publishYearField;
            }
            set {
                if ((publishYearField.Equals(value) != true)) {
                    this.publishYearField = value;
                    this.OnPropertyChanged("PublishYear");
                }
            }
        }
        
        public dvdCover Cover {
            get {
                return this.coverField;
            }
            set {
                if (((this.coverField == null) 
                            || (coverField.Equals(value) != true))) {
                    this.coverField = value;
                    this.OnPropertyChanged("Cover");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    public enum Styles {
        
        Action,
        
        Fiction,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class dvdCover : EntityBase<dvdCover> {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string systemeField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string valueField;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Systeme {
            get {
                return this.systemeField;
            }
            set {
                if (((this.systemeField == null) 
                            || (systemeField.Equals(value) != true))) {
                    this.systemeField = value;
                    this.OnPropertyChanged("Systeme");
                }
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                if (((this.valueField == null) 
                            || (valueField.Equals(value) != true))) {
                    this.valueField = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class Actors : EntityBase<Actors> {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List<Actor> actorField;
        
        /// <summary>
        /// Actors class constructor
        /// </summary>
        public Actors() {
            this.actorField = new List<Actor>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Actor")]
        public List<Actor> Actor {
            get {
                return this.actorField;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=true)]
    public partial class mycttype : EntityBase<mycttype> {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private double valueField;
        
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                if ((valueField.Equals(value) != true)) {
                    this.valueField = value;
                    this.OnPropertyChanged("Value");
                }
            }
        }
    }
}
