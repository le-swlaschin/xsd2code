// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 2.1.3148.17485
//   <NameSpace>XSD2Code.Test</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>True</EnableDataBinding><HidePrivateFieldInIDE>True</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment>
//  <auto-generated>
// ------------------------------------------------------------------------------
namespace XSD2Code.Test {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Collections.Generic;
    
    
    /// <summary>
    /// Actor class include firstname and lastname
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class Actor {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string firstnameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string lastnameField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string sexField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string nationalityField;
        
        /// <summary>
        /// .ctor class constructor
        /// </summary>
        public Actor() {
            this.nationalityField = "US";
        }
        
        /// <summary>
        /// Gets or sets the firstname of the actor
        /// </summary>
        public string firstname {
            get {
                return this.firstnameField;
            }
            set {
                if ((firstnameField.Equals(value) != true)) {
                    this.firstnameField = value;
                    OnPropertyChanged("firstname");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the lastname of the actor
        /// </summary>
        public string lastname {
            get {
                return this.lastnameField;
            }
            set {
                if ((lastnameField.Equals(value) != true)) {
                    this.lastnameField = value;
                    OnPropertyChanged("lastname");
                }
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="integer")]
        public string sex {
            get {
                return this.sexField;
            }
            set {
                if ((sexField.Equals(value) != true)) {
                    this.sexField = value;
                    OnPropertyChanged("sex");
                }
            }
        }
        
        /// <summary>
        /// nationality of actor
        /// </summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("US")]
        public string nationality {
            get {
                return this.nationalityField;
            }
            set {
                if ((nationalityField.Equals(value) != true)) {
                    this.nationalityField = value;
                    OnPropertyChanged("nationality");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        private void OnPropertyChanged(string info) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class DvdCollection : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List <dvds> dvdsField;
        
        /// <summary>
        /// .ctor class constructor
        /// </summary>
        public DvdCollection() {
            if ((this.dvdsField == null)) {
                this.dvdsField = new List <dvds>();
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("dvds")]
        public List <dvds> dvds {
            get {
                return this.dvdsField;
            }
            set {
                if ((dvdsField.Equals(value) != true)) {
                    this.dvdsField = value;
                    OnPropertyChanged("dvds");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        private void OnPropertyChanged(string info) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class dvds : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string titleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private string styleField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List <Actor> actorField;
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private System.Nullable<bool> showField;
        
        /// <summary>
        /// .ctor class constructor
        /// </summary>
        public dvds() {
            if ((this.actorField == null)) {
                this.actorField = new List <Actor>();
            }
        }
        
        /// <summary>
        /// Gets or sets the title of dvd.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((titleField.Equals(value) != true)) {
                    this.titleField = value;
                    OnPropertyChanged("title");
                }
            }
        }
        
        /// <remarks/>
        public string style {
            get {
                return this.styleField;
            }
            set {
                if ((styleField.Equals(value) != true)) {
                    this.styleField = value;
                    OnPropertyChanged("style");
                }
            }
        }
        
        /// <summary>
        /// Represent the actor list
        /// The list include Firstname and last name of the actor.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Actor")]
        public List <Actor> Actor {
            get {
                return this.actorField;
            }
            set {
                if ((actorField.Equals(value) != true)) {
                    this.actorField = value;
                    OnPropertyChanged("Actor");
                }
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> show {
            get {
                return this.showField;
            }
            set {
                if ((showField.Equals(value) != true)) {
                    this.showField = value;
                    OnPropertyChanged("show");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        private void OnPropertyChanged(string info) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1434")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="", IsNullable=false)]
    public partial class Actors : System.ComponentModel.INotifyPropertyChanged {
        
        [EditorBrowsable(EditorBrowsableState.Never)]
        private List <Actor> actorField;
        
        /// <summary>
        /// .ctor class constructor
        /// </summary>
        public Actors() {
            if ((this.actorField == null)) {
                this.actorField = new List <Actor>();
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Actor")]
        public List <Actor> Actor {
            get {
                return this.actorField;
            }
            set {
                if ((actorField.Equals(value) != true)) {
                    this.actorField = value;
                    OnPropertyChanged("Actor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        private void OnPropertyChanged(string info) {
            PropertyChangedEventHandler handler = PropertyChanged;
            if (handler != null) {
                handler(this, new PropertyChangedEventArgs(info));
            }
        }
    }
}
